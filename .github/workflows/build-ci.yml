name: Build SocNetV (CI) 🚀
# run-name: ${{ github.actor }} testing latest SocNetV build with
on: [push]


env:
  EXECUTABLE: "SocNetV"
  APPLICATION: "SocNetV"
  UNIXNAME: "SocNetV"
  QMAKE_PROJECT: "socnetv.pro"
  PUBLISHER: "Dimitris Kalamaras"
  QT_MODULES: "qtwebsockets qtimageformats qt5compat qtcharts qtdatavis3d qtwebview qt3d"
  QMAKE_CONFIG: debug
  CMAKE_CONFIG: Debug
  CORES: 16


jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, macos-latest, windows-2019]
        qt-version: ['6.2.4', '6.4.3', '6.5.3', '6.6.3']
        # exclude:
        #   - os: ubuntu-latest
        #     qt-version: '6.5.3'
        #   - os: windows-2019
        #     qt-version: '6.5.3'
        #   - os: macos-latest
        #     qt-version: '6.5.3'
        # include:
        #   - os: ubuntu-latest
        #     qt-version: '6.6.3'
        #   - os: windows-2019
        #     qt-version: '6.6.3'
        #   - os: macos-latest
        #     qt-version: '6.6.3'
        #   # Snapcraft
        #   - os: ubuntu-22.04
        #     qt-version: '6.5.3'
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event, by actor ${{ github.actor }}."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}


      #
      # Install Qt
      #

      - if: contains( matrix.os, 'windows')
        name: Prepare for Windows
        run: |
          echo "🪟 -- Preparing for Windows..."
          # DONT NEED IT. FOR DEBUG ONLY
          # pip install aqtinstall
          # aqt list-qt windows desktop
          # aqt list-qt windows desktop --arch ${{ matrix.qt-version }}
          # aqt list-qt windows desktop --modules ${{ matrix.qt-version }} win64_mingw
      - if: contains( matrix.os, 'ubuntu')
        name: Install dependencies
        run: |
          echo "🐧 -- Preparing for ubuntu..."
          sudo apt install build-essential libssl-dev \
             cmake ninja-build \
             libssl-dev libxkbcommon-x11-dev libxcb-cursor-dev zlib1g-dev
          # DONT NEED IT. FOR DEBUG ONLY
          # pip install aqtinstall
          # aqt list-qt linux desktop
          # aqt list-qt linux desktop --long-modules ${{ matrix.qt-version }} win64_mingw
      - if: contains( matrix.os, 'macos')
        name: Install for macOS
        run: |
          echo "🍎 -- Preparing for macos..."
          ls
          # DONT NEED IT. FOR DEBUG ONLY
          # pip install aqtinstall
          # aqt list-qt mac desktop
          # aqt list-qt mac desktop --modules ${{ matrix.qt-version }}

      #
      # Install Qt
      #
      - if: contains( matrix.os, 'windows')
        name: Make sure MSVC is found
        uses: ilammy/msvc-dev-cmd@v1

      - if: contains( matrix.os, 'windows') && matrix.qt-version == '6.2.4'
        name: Install Qt Qt 6.2.4 on Windows
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==2.0.0'
          version: ${{ matrix.qt-version }}
          # arch: win64_mingw # we build with msvc
          modules: qtwebsockets qtimageformats qt5compat qtcharts qtdatavis3d qtwebview qt3d
          cache: true
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version != '6.2.4'
        name: Install Qt 6.3+ on Windows
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==2.1.*'
          version: ${{ matrix.qt-version }}
          #arch: win64_mingw # we build with msvc
          modules: qtwebsockets qtimageformats qt5compat qtcharts qtdatavis3d qtwebview qt3d
          cache: true
      - if: contains( matrix.os, 'ubuntu') && startsWith( matrix.qt-version, '6.' )
        name: Install Qt 6 on Linux
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==2.0.0'
          version: ${{ matrix.qt-version }}
          modules: qtwebsockets qtimageformats qt5compat qtcharts qtdatavis3d qtwebview qt3d
          cache: true
      - if: contains( matrix.os, 'macos') && startsWith( matrix.qt-version, '6.' )
        name: Install Qt 6 on macOS
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==2.0.0'
          version: ${{ matrix.qt-version }}
          modules: qtwebsockets qtimageformats qt5compat qtcharts qtdatavis3d qtwebview qt3d
          cache: true


      #
      # Build SocNetV
      #
      - if: contains( matrix.os, 'ubuntu-22.04')
        name: Build for Linux
        run: |
          echo "🔎 Check openssl version:"
          echo `openssl version`
          echo "🔎 Check output of 'which qmake6':"
          which qmake6
          echo "🔎 Check qmake6 version:"
          qmake6 -v
          echo "🔧 Running qmake on ubuntu 22.04 with ${{env.QMAKE_CONFIG}}..."
          qmake6 CONFIG+=${{env.QMAKE_CONFIG}}
          echo "🚧 🛠️ Compiling for linux with make. Please wait..."
          make -j${{env.CORES}}
          echo "👉 Building finished. Listing current directory with find for verification:"
          find .
      - if: contains( matrix.os, 'ubuntu-latest')
        name: Build for Linux
        run: |
          echo "🔎 Check openssl version:"
          echo `openssl version`
          echo "🔎 Check output of 'which qmake6':"
          which qmake6
          echo "🔎 Check qmake6 version:"
          qmake6 -v
          echo "🔧 Running qmake on ubuntu with ${{env.QMAKE_CONFIG}}..."
          qmake6 CONFIG+=${{env.QMAKE_CONFIG}}
          echo "🚧 🛠️ Compiling for linux with make. Please wait..."
          make
          echo "👉 Building finished. Listing current directory with find for verification:"
          find .
      # BUILD FOR MACOS
      - if: contains( matrix.os, 'macos')
        name: Build for macOS
        run: |
          echo "🔧 Running qmake on macos with ${{env.QMAKE_CONFIG}}..."
          qmake CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}}
          echo "🚧 🛠️ Compiling for macos with make. Please wait..."
          make
          echo "👉 Building finished. Listing current directory with find for verification:"
          find .
      # BUILD FOR WINDOWS
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version == '6.2.4'
        name: Build for Windows
        run: |
          echo "🔎 Listing some directories"
          dir D:\a\app\Qt\
          echo "🔧 Running qmake6"
          qmake6 CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}} -r
          echo "🚧 🛠️ Compiling with nmake. Please wait..."
          nmake
          echo "👉 Building finished. Listing current directory for verification:"
          dir
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version == '6.4.3'
        name: Build for Windows
        run: |
          echo "🔎 Listing some directories"
          dir D:\a\app\Qt\
          echo "🔧 Running qmake6"
          qmake6 CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}} -r
          echo "🚧 🛠️ Compiling with nmake. Please wait..."
          nmake
          echo "👉 Building finished. Listing current directory for verification:"
          dir
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version == '6.5.3'
        name: Build for Windows
        run: |
          echo "🔎 Listing some directories"
          dir D:\a\app\Qt\
          echo "💡 Creating build dir"
          mkdir build
          echo "🔧 Running cmake""
          cmake -S . -B build
          echo "🚧 🛠️ Compiling into build/ with cmake --build build --config ${{env.CMAKE_CONFIG}}. Please wait..."
          cmake --build build --config ${{env.CMAKE_CONFIG}}
          echo "👉 Building finished. Listing directory build/ for verification:"
          dir build
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version == '6.6.3'
        name: Build for Windows
        run: |
          echo "🔎 Listing some directories"
          dir D:\a\app\Qt\
          echo "💡 Creating build dir"
          mkdir build
          echo "🔧 Running cmake"
          cmake -S . -B build
          echo "🚧 🛠️ Compiling into build/ with cmake --build build --config ${{env.CMAKE_CONFIG}}. Please wait..."
          cmake --build build --config ${{env.CMAKE_CONFIG}}
          echo "👉 Building finished. Listing directory build/ for verification:"
          dir build
      - run: echo "🍏 This job's status is ${{ job.status }}."
