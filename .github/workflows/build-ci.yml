# GitHub Action to CI build SocNetV for all 3 major OSes
# Triggered only when the commit message contains [gha] or [ci]

name: Build SocNetV (CI) üöÄ

on:
  push:
    branches:
      - develop

env:
  EXECUTABLE: "SocNetV"
  APPLICATION: "SocNetV"
  UNIXNAME: "socnetv"
  SOCNETV_VERSION: "3.2"      # TODO - READ FROM FILE
  VERSION: "3.2"              # WILL BE UPDATED DYNAMICALLY BELOW
  QMAKE_PROJECT: "socnetv.pro"
  PUBLISHER: "Dimitris Kalamaras"
  QT_MODULES: "qtwebsockets qtimageformats qt5compat qtcharts qtdatavis3d qtwebview qt3d"
  QMAKE_CONFIG: debug  # release  # TODO IF IN MASTER SET AS RELEASE
  CMAKE_CONFIG: Debug  # Release
  CORES: 16
  MAC_ARTIFACT: ""
  LINUX_ARTIFACT: ""
  WINDOWS_ARTIFACT: ""


jobs:
  ci_build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-2019]
        # NOTE:
        # - We will CI build only for Qt6 LTS releases, see: https://doc.qt.io/qt-6/qt-releases.html
        # - For the Qt Versions supported by aqtinstall, see: https://ddalcino.github.io/aqt-list-server/
        qt-version: ['6.2.4', '6.5.3', '6.6.3', '6.8.0']
        # exclude:
        #   - os: ubuntu-latest
        #     qt-version: '6.5.3'
        #   - os: windows-2019
        #     qt-version: '6.5.3'
        #   - os: macos-latest
        #     qt-version: '6.5.3'
        # include:
        #   - os: macos-latest
        #     qt-version: '6.6.3'
        #   # Snapcraft
        #   - os: ubuntu-20.04
        #     qt-version: '6.5.3'
    runs-on: ${{ matrix.os }}
    if: contains(github.event.head_commit.message, '[ci]') || contains(github.event.head_commit.message, '[gha]')
    steps:
      - name: ü§ñ Job information, on branch ${{ github.ref }}
        run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event, by actor ${{ github.actor }}."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: üìÇ Check out repository ${{ github.repository }}
        uses: actions/checkout@v4
      - name: üí° List files cloned from the ${{ github.repository }}
        run: |
          ls ${{ github.workspace }}
          echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
          echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: üí° Set version dynamically
        shell: bash
        id: set_version
        run: |
          # Check if this is a tagged commit
          if [ -n "${GITHUB_REF}" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/} # Extract tag name
          else
            LAST_COMMIT_SHORT=$(git rev-parse --short HEAD)
            VERSION="${SOCNETV_VERSION}-${LAST_COMMIT_SHORT}" # Use custom versioning for non-tagged commits
          fi

          # Export VERSION as an environment variable for subsequent steps
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Determined build version ${{ env.VERSION }}
        run: echo "VERSION is set to ${{ env.VERSION }}"

      #
      # Install Qt
      #

      - if: contains( matrix.os, 'windows')
        name: Prepare for ${{matrix.os}}
        run: |
          echo "ü™ü -- Preparing for Windows..."
          # DONT NEED IT. FOR DEBUG ONLY
          # pip install aqtinstall
          # aqt list-qt windows desktop
          # aqt list-qt windows desktop --arch ${{ matrix.qt-version }}
          # aqt list-qt windows desktop --modules ${{ matrix.qt-version }} win64_mingw
      - if: contains( matrix.os, 'ubuntu')
        name: Prepare for ${{matrix.os}}
        run: |
          echo "üêß -- Preparing for ubuntu..."
          sudo apt install build-essential libssl-dev \
             cmake ninja-build \
             libssl-dev libxkbcommon-x11-dev libxcb-cursor-dev zlib1g-dev
          # DONT NEED IT. FOR DEBUG ONLY
          # pip install aqtinstall
          # aqt list-qt linux desktop
          # aqt list-qt linux desktop --long-modules ${{ matrix.qt-version }} win64_mingw
      - if: contains( matrix.os, 'macos')
        name: Prepare for ${{matrix.os}}
        run: |
          echo "üçé -- Preparing for macos..."
          ls
          # DONT NEED IT. FOR DEBUG ONLY
          # pip install aqtinstall
          # aqt list-qt mac desktop
          # aqt list-qt mac desktop --modules ${{ matrix.qt-version }}

      #
      # Install Qt (using https://github.com/jurplel/install-qt-action)
      #
      - if: contains( matrix.os, 'windows')
        name: Make sure MSVC is found
        uses: ilammy/msvc-dev-cmd@v1
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' )
        name: Install Qt ${{ matrix.qt-version }} on ${{ matrix.os }}
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'               # Use the default aqtinstall version
          version: ${{ matrix.qt-version }}   # Qt version to install
          # arch: win64_mingw
          # NOTE: We build with default arch:
          # win64_msvc2019_64 if Qt < 6.8
          # win64_msvc2022_64 if Qt >= 6.8
          # see https://github.com/jurplel/install-qt-action
          modules: ${{env.QT_MODULES}}
          cache: true
      - if: contains( matrix.os, 'ubuntu') && startsWith( matrix.qt-version, '6.' )
        name: Install Qt 6 on ${{ matrix.os }}
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'               # Use the default aqtinstall version
          version: ${{ matrix.qt-version }}   # Qt version to install
          modules: ${{env.QT_MODULES}}
          cache: true
      - if: contains( matrix.os, 'macos') && startsWith( matrix.qt-version, '6.' )
        name: Install Qt 6 on macOS
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'               # Use the default aqtinstall version
          version: ${{ matrix.qt-version }}
          modules: ${{env.QT_MODULES}}
          cache: true


      #
      # Build SocNetV
      #
      - if: contains( matrix.os, 'ubuntu-20.04') && matrix.qt-version == '6.2.4'
        name: Build ${{ env.VERSION }} AppImage for ${{matrix.os}} with Qt${{matrix.qt-version}}
        run: |
          echo "üîß Installing dependencies for AppImage creation..."
          sudo apt update
          sudo apt install -y build-essential libssl-dev cmake ninja-build \
            libssl-dev libxkbcommon-x11-dev libxcb-cursor-dev zlib1g-dev \
            desktop-file-utils patchelf libglu1-mesa-dev libfontconfig1 libfreetype6 libx11-dev libxext-dev \
            libxrandr-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev libfuse2

          echo "üîé Check openssl version:"
          echo `openssl version`

          echo "üîß Installing linuxdeployqt..."
          wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage

          echo "üí° Deleting old build directory..."
          rm -rf build
          echo "üí° List current directory..."
          pwd
          ls

          MY_PREFIX="/usr"

          echo "üîß Configuring project using 'cmake -S . -B build¬†-DCMAKE_BUILD_TYPE=${{env.CMAKE_CONFIG}}' ..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.CMAKE_CONFIG}} -DCMAKE_INSTALL_PREFIX=${MY_PREFIX}

          ls build/

          echo "üöß Compiling the project..."
          cmake --build build -j$(nproc)

          echo "üîé Verifying built files..."
          ls -lh ./build/
          echo "üîé Search for built executable..."
          find ./build -type f -name "${{env.UNIXNAME}}*"

          echo "üîß Installing the application into AppDir..."
          cd build
          make install DESTDIR=AppDir

          if [ -d "./AppDir" ]; then
              echo "AppDir created successfully!"
          else
              echo "Error: AppDir was not created!"
              exit 1
          fi

          # NOTE: linuxdeployqt supports up to Ubuntu Focal Fossa 
          echo "üöÄ Creating the AppImage using linuxdeployqt..."
          ../linuxdeployqt-continuous-x86_64.AppImage AppDir/${MY_PREFIX}/usr/share/applications/*.desktop \
            -appimage -extra-plugins=iconengines,imageformats

          ARTIFACT_FN="${{env.APPLICATION}}-${{env.VERSION}}.AppImage"

          if [[ -f ${ARTIFACT_FN} ]]; then
              echo "üéâ AppImage created! Listing files in current directory..."
              ls -lh ./*.AppImage
              echo "Artifact created! Exporting LINUX_ARTIFACT=${ARTIFACT_FN}"
              echo "LINUX_ARTIFACT=${ARTIFACT_FN}" >> $GITHUB_ENV
          else
              echo "‚ùå AppImage creation failed!"
              exit 1
          fi
      - if: contains( matrix.os, 'ubuntu-20.04') && matrix.qt-version == '6.2.4' && env.LINUX_ARTIFACT != ''
        name: Create (or fetch) continuous release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: continuous
          release_name: "Continuous Build"
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
      - if: contains( matrix.os, 'ubuntu-20.04') && matrix.qt-version == '6.2.4' && env.LINUX_ARTIFACT != ''
        name: Upload Ubuntu 20.04 build AppImage to GitHub Releases
        uses: actions/upload-release-asset@v1
        with:
          upload_url: "https://uploads.github.com/repos/${{ github.repository }}/releases/continuous/assets{?name,label}"
          asset_path: build/${{ env.LINUX_ARTIFACT }}
          asset_name: "${{ env.LINUX_ARTIFACT }}"
          asset_content_type: "application/octet-stream"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          

      - if: contains( matrix.os, 'ubuntu-20.04') && matrix.qt-version != '6.2.4'
        name: Build ${{ env.VERSION }} for ${{matrix.os}} with Qt${{matrix.qt-version}}
        run: |
          echo '‚öôÔ∏è Install dependencies for building....'
          sudo apt install desktop-file-utils
          echo "üîé Check openssl version:"
          echo `openssl version`
          echo "üîé Check output of 'which qmake6':"
          which qmake6
          echo "üîé Check qmake6 version:"
          qmake6 -v
          echo "üîß Running qmake on ubuntu 22.04 with ${{env.QMAKE_CONFIG}}..."
          qmake6 CONFIG+=${{env.QMAKE_CONFIG}}
          echo "üöß üõ†Ô∏è Compiling for linux with make -j${{env.CORES}}. Please wait..."
          make -j${{env.CORES}}
          echo "üëâ Building finished. Listing current directory with find for verification:"
          find .          
      - if: contains( matrix.os, 'ubuntu-latest')
        name: Build ${{ env.VERSION }} for ${{matrix.os}} with Qt ${{matrix.qt-version}}
        run: |
          echo "üîß Installing dependencies for AppImage creation..."
          sudo apt update
          sudo apt install -y build-essential libssl-dev cmake ninja-build \
            libssl-dev libxkbcommon-x11-dev libxcb-cursor-dev zlib1g-dev \
            desktop-file-utils patchelf libglu1-mesa-dev libfontconfig1 libfreetype6 libx11-dev libxext-dev \
            libxrandr-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev libfuse2

          echo "üîé Check openssl version:"
          echo `openssl version`

          echo "üîß Installing linuxdeployqt..."
          wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage

          echo "üí° Deleting old build directory..."
          rm -rf build
          echo "üí° List current directory..."
          pwd
          ls

          echo "üîß Configuring project using 'cmake -S . -B build¬†-DCMAKE_BUILD_TYPE=${{env.CMAKE_CONFIG}}' ..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.CMAKE_CONFIG}}

          ls build/

          echo "üöß Compiling the project..."
          cmake --build build -j$(nproc)

          echo "üîé Verifying built files..."
          ls -lh ./build/
          echo "üîé Search for built executable..."
          find ./build -type f -name "${{env.UNIXNAME}}*"

          echo "üîß Installing the application into AppDir..."
          cd build
          make install DESTDIR=AppDir

          if [ -d "./AppDir" ]; then
              echo "AppDir created successfully!"
          else
              echo "Error: AppDir was not created!"
              exit 1
          fi


      # BUILD FOR MACOS
      - if: contains( matrix.os, 'macos')
        name: Build ${{ env.VERSION }} for ${{matrix.os}} with Qt ${{matrix.qt-version}}
        id: build_macos_artifact
        run: |
          echo "üçé Preparing macOS build..."
          echo "Building version: ${{env.VERSION}}"
          # Ensure Qt is installed and in PATH
          # export PATH="$(brew --prefix qt)/bin:$PATH"
          which qmake

          echo "üîß Running 'qmake CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}}' to configure on macos..."
          qmake CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}}
          echo "üöß üõ†Ô∏è Compiling for macos with make. Please wait..."
          make
          echo "üëâ Building finished. Listing current directory with find for verification:"
          find .


          # Verify the binary with lipo
          echo "üîé Verifying architectures in the built binary..."
          if [[ -f "${{env.EXECUTABLE}}.app/Contents/MacOS/${{env.EXECUTABLE}}" ]]; then
              lipo -info "${{env.EXECUTABLE}}.app/Contents/MacOS/${{env.EXECUTABLE}}"
          else
              echo "‚ùå Error: Binary file not found!"
              exit 1
          fi

          echo "üîß Removing items we do not deploy from project dir ..."
          rm -rf moc obj qrc

          # # Install into AppDir
          # echo "üîß Installing the application into AppDir..."
          # make install DESTDIR=AppDir

          # # Verify AppDir contents
          # echo "Verifying installed files in AppDir..."
          # find AppDir

          # Run macdeployqt to bundle the app
          echo "üöÄ Running macdeployqt to create macOS bundle..."
          macdeployqt "${{env.APPLICATION}}.app"  -dmg || {
            echo "Error: macdeployqt failed."
            exit 1
          }

          # Rename DMG file
          if [[ -f ${{env.APPLICATION}}.dmg ]]; then
            DMG_NAME="${{env.APPLICATION}}-${{env.VERSION}}.dmg"
            mv "${{env.APPLICATION}}.dmg" "${DMG_NAME}"
            echo "üéâ Build and packaging complete. Final DMG: ${DMG_NAME}"
            ls -lh "${DMG_NAME}"
            echo "Artifact created! Exporting MAC_ARTIFACT=${DMG_NAME}"
            echo "MAC_ARTIFACT=${DMG_NAME}" >> $GITHUB_ENV
          else
             echo "Error: DMG creation failed. No DMG file found. Skipping upload."
             exit 1
          fi



      # Upload artifacts from macOS build to 'continuous' pre-release tag
      - if: contains( matrix.os, 'macos') && env.MAC_ARTIFACT != ''
        name: Upload macOS build artifacts to GitHub ${{ github.event.repository.releases_url }}/continuous/assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: "https://uploads.github.com/repos/${{ github.repository }}/releases/continuous/assets{?name,label}"
          asset_path: "${{ env.APPLICATION }}-${{ env.VERSION }}.dmg"
          asset_name: "${{ env.MAC_ARTIFACT }}"
          asset_content_type: "application/octet-stream"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # BUILD FOR WINDOWS
      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version == '6.2.4'
        name: Build ${{ env.VERSION }} for ${{matrix.os}} with Qt ${{matrix.qt-version}}
        run: |
          echo "üîé Listing some directories"
          dir D:\a\app\Qt\
          echo "üîß Running 'qmake6 CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}} -r' to configure the project on Windows..."
          qmake6 CONFIG+=${{env.QMAKE_CONFIG}} ${{env.QMAKE_PROJECT}} -r
          echo "üöß üõ†Ô∏è Compiling with nmake. Please wait..."
          nmake
          echo "üëâ Building finished. Listing current directory for verification:"
          dir

      - if: contains( matrix.os, 'windows') && startsWith( matrix.qt-version, '6.' ) && matrix.qt-version != '6.2.4'
        name: Build ${{ env.VERSION }} for ${{matrix.os}} with Qt ${{matrix.qt-version}}
        run: |
          echo "üîé Listing some directories"
          dir D:\a\app\Qt\
          echo "üí° Creating build dir"
          mkdir build
          echo "üîß Running 'cmake -S . -B build' to configure the project..."
          cmake -S . -B build
          echo "üöß üõ†Ô∏è Compiling into build/ with 'cmake --build build -j${{env.CORES}} --config ${{env.CMAKE_CONFIG}}'. Please wait..."
          cmake --build build -j${{env.CORES}} --config ${{env.CMAKE_CONFIG}} -v
          echo "üëâ Building finished. Listing directory build/ for verification: "
          dir build

      - run: echo "üçè This job's status is ${{ job.status }}."
